#include <stdio.h>

#define MAX_MONTHS 12

// declaraçoes de funçoes
int getDaysInMonth(int month, int isLeapYear);
void printCalendar(int startingDay, int isLeap, int agendamento[],
                   int showSchedule);
void adicionarAgendamento(int agendamento[], int isLeapYear);
int dateToDaynumber(int day, int month, int isLeapYear);

// funções

//Essa função recebe o primeiro dia, se é bissexto e o vetor de agendamento.
//Ele utiliza a função de calendário para imprimir o calendário de agendamento.
void showSchedueling(int startingDay, int isLeap, int agendamento[]) {
  printCalendar(startingDay, isLeap, agendamento, 1);
}
//Input de agentamento.
//Ela recebe uma array de agendamento.
//Ela recebe se o ano é bissexto.
//Ela retorna ao usuario se conseguiu ou não fazer o agendamento com um printf.
void adicionarAgendamento(int agendamento[], int isLeapYear) {
  int duracao, diaInicio, mesInicio;

  printf("qual dia deseja começar o tratamento?");
  scanf("%d", &diaInicio);

  printf("qual mes deseja começar o tratamento?");
  scanf("%d", &mesInicio);

  printf("digite a duracao do tratamento: ");
  scanf("%d", &duracao);

  int diaDoAnoInicio = dateToDaynumber(diaInicio, mesInicio, isLeapYear);
  for (int i = diaDoAnoInicio; i < diaDoAnoInicio + duracao; i++) {

    if (agendamento[i - 1] >= 5) {
      printf("Não e possivel agendar esse tratamento");
      return;
    }
  }
  for (int i = diaDoAnoInicio; i < diaDoAnoInicio + duracao; i++) {
    agendamento[i - 1] += 1;
  }
  printf("Seu agendamento foi realizado com sucesso");
  return;
}

// Converção de de dia e mês para dia do ano
// Month e day receberá valor humano e será convertido para posição de vetor
// Ex fevereiro = 2
int dateToDaynumber(int day, int month, int isLeapYear) {
  int qtd = day;

  for (int i = 0; i < month - 1; i++) {
    qtd += getDaysInMonth(i, isLeapYear);
  }
  return qtd;
}
//Ve se o ano é bissexto.
//Pega os dias do mês.
//E retorna a array de dias em meses atualizado.
int getDaysInMonth(int month, int isLeapYear) {
  int daysInMonths[MAX_MONTHS] = {
      31, // janeiro
      28, // fevereiro
      31, // marco
      30, // abril
      31, // maio
      30, // junho
      31, // julho
      31, // agosto
      30, // setembro
      31, // outubro
      30, // novembro
      31, // dezembro
  };

  if (isLeapYear) {
    daysInMonths[1] = 29;
  }

  return daysInMonths[month];
}

// Função para imprimir o calendário de um mês (dias, não agendamento)
void printMonth(int firstDay, int daysInMonth, int agendamento[],
                int showSchedule, int month, int isLeapYear) {
  printf("Dom\tSeg\tTer\tQua\tQui\tSex\tSab\n");
  int i;

  // Impressão dos espaços em branco para alinhar o 1º dia do mês
  for (i = 0; i < firstDay; i++)
    printf("\t");

  // Impressão dos dias do mês
  for (i = 1; i <= daysInMonth; i++) {
    // Quando showSchedule = 1, mostraremos os agendamentos para os dias.
    // Quando showSchedule = 0, mostraremos o calendario.
    if (showSchedule == 1) {
      int dayOfYear = dateToDaynumber(i, month + 1, isLeapYear);
      printf("%3d ", agendamento[dayOfYear - 1]);

    } else {
      printf("%3d ", i);
    }
    // se for multiplo de 7 e for o ultimo dia, pule uma linha para formatacao
    if ((i + firstDay) % 7 == 0 || i == daysInMonth)
      printf("\n");
  }
}

//Ela mostra o calandairo para o usuario
void printCalendar(int startingDay, int isLeap, int agendamento[],
                   int showSchedule) {
  char formattedMonths[MAX_MONTHS][10] = {
      "Janeiro", "Fevereiro", "Março",    "Abril",   "Maio",     "Junho",
      "Julho",   "Agosto",    "Setembro", "Outubro", "Novembro", "Dezembro"};

  //Imprime o calendário de cada mês
  for (int month = 0; month < MAX_MONTHS; month++) {
    //Pula linhas para facilitar leitura
    printf("\n\n");

    //imprime nome do mês atual que está sendo exibido
    printf("%s\n", formattedMonths[month]);

    //busca quantos dias este mês tem
    int daysInMonth = getDaysInMonth(month, isLeap);

    //Imprime o mês que está gostariamos de exibir
    printMonth(startingDay, daysInMonth, agendamento, showSchedule, month,
               isLeap);

    //Atualiza o dia da semana para o próximo mês
    startingDay = (startingDay + daysInMonth) % 7;
  }
}

//Main recebe input para saber se é bissexto ou não e em qual dia da semana começa o 1º de janeiro cai.
//
int main() {
  int startingDay;
  int isLeap;
  //Solicita ao usuário o dia da semana do 1º de janeiro
  do{
  printf("Digite o dia da semana em que o 1º de janeiro cai (0 = Domingo, 1 = "
         "Segunda, ..., 6 = Sábado): ");
  scanf("%d", &startingDay);
  }while(startingDay != 0 && startingDay != 1 && startingDay != 2 && startingDay != 3 && startingDay != 4 && startingDay != 5 && startingDay != 6);
  //Verifica se o ano é bissexto
  do{
  printf("O ano é bissexto? (1 para sim, 0 para não): ");
  scanf("%d", &isLeap);
  }while(isLeap != 1 && isLeap != 0);
  int opcao;

  int agendamento[366] = {0};
  
  //Menu
  do {
    printf("\nMENU:\n");
    printf("1. Mostrar calendário\n");
    printf("2. Inserir agendamento\n");
    printf("3. Mostrar calendário com agendamentos\n");
    printf("0. Sair\n");
    printf("Escolha uma opção: ");
    scanf("%d", &opcao);

    switch (opcao) {
    case 1:
      printCalendar(startingDay, isLeap, agendamento, 0);
      break;
    case 2:
      adicionarAgendamento(agendamento, isLeap);

      // inserir Agendamentos
      break;
    case 3:
      // mostrarCalendarioComAgendamentos
      showSchedueling(startingDay, isLeap, agendamento);

      break;
    case 0:
      printf("Saindo do programa...\n");
      break;
    default:
      printf("Opção inválida. Por favor, escolha novamente.\n");
    }
  } while (opcao != 0);

  return 0;
}
